Mám následující situaci:

✅ Syntax check OK („metro.config ok“)
❌ EAS build stále hlásí: 
"It looks like that you are using a custom metro.config.js that does not extend @expo/metro-config ... We recommend you to abort, fix the metro.config.js, and try again."

Obsah `metro.config.js` je aktuálně:
-------------------------------------
const { getDefaultConfig } = require('@expo/metro-config');
const config = getDefaultConfig(__dirname);
module.exports = config;
-------------------------------------

Úkol: oprav to tak, aby EAS warning zmizel a build prošel. Postupuj striktně v tomto pořadí:

1) Zjisti, zda VŮBEC potřebujeme jakoukoliv customizaci Metra.
   - Prohledej repo na výskyty věcí typu svg transformer, custom assetExts/sourceExts, extraNodeModules apod.
   - Pokud žádnou reálnou customizaci nepotřebujeme, nejlepší řešení je `metro.config.js` úplně odstranit.

2) Varianta A – žádná customizace není potřeba:
   - Smaž `metro.config.js` v kořeni projektu.
   - Proveď kontrolu: `test -f metro.config.js && echo "exists" || echo "not_found"`
   - Spusť „dry“ build (bez cred prompts): 
     `echo "n" | eas build --profile production --platform ios`
   - Očekávání: warning o „custom metro.config.js“ se už NESMÍ objevit. Vlož sem prvních ~200 řádků výstupu.

3) Varianta B – customizace JE potřeba:
   - Vrať `metro.config.js` do minimálního a jednoznačného tvaru, který EAS akceptuje (žádná funkce navíc, žádné ESM, čistý CJS export). Přepiš přesně:
     // metro.config.js
     const { getDefaultConfig } = require('@expo/metro-config');
     module.exports = getDefaultConfig(__dirname);
   - Pokud musíme doplnit úpravy (např. přidat svg transformer), proveď je **výhradně** přes mutaci objektu, který pochází z `getDefaultConfig(__dirname)` – aby bylo zřejmé, že extendujeme @expo/metro-config. Příklad:
     const { getDefaultConfig } = require('@expo/metro-config');
     const config = getDefaultConfig(__dirname);
     // příklad: config.transformer.babelTransformerPath = require.resolve('react-native-svg-transformer');
     // příklad: config.resolver.assetExts = config.resolver.assetExts.filter(ext => ext !== 'svg');
     // příklad: config.resolver.sourceExts.push('svg');
     module.exports = config;
   - Ujisti se, že soubor je v kořeni projektu a neexistuje žádný jiný `metro.config.*`.
     Zkontroluj: `find . -maxdepth 2 -name "metro.config.*" -print`
   - Proveď Node sanity check: 
     `node -e "require('./metro.config.js'); console.log('metro.config ok')"`
   - Spusť znovu „dry“ build:
     `echo "n" | eas build --profile production --platform ios`
   - Vrať sem prvních ~200 řádků, abych ověřil, že EAS už warning nehlásí.

4) V žádném kroku neupravuj `app.config.ts`, `package.json`, ani jiné části projektu. Cílem je jen odstranit příčinu EAS warningu kolem Metra.

5) Pokud i po variantě A (smazání souboru) EAS stále tvrdí, že je přítomen custom metro config, ověř přesné working directory buildu a existenci souboru v repu (cache/artefakty). V tom případě:
   - Znovu vypiš `git status`, `ls -la` v rootu a `find . -maxdepth 3 -name "metro.config.*"`.
   - Reportuj, co přesně EAS vidí.

Očekávaný výsledek: 
- Nejlépe varianta A (žádný `metro.config.js` vůbec → žádný warning).
- Pokud musíme zachovat customizaci, varianta B s jasným „extend“ z `@expo/metro-config` a build bez varování.
